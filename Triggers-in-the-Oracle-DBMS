Завдання: 
1.	У всіх таблицях створити поля UCR, DCR, ULC, DLC. Написати тригери які будуть заповнювати дані поля наступним чином: UCR – ім’я користувача, що створив даний запис; DCR – дата та час створення даного запису; ULC – ім’я користувача, що останнім змінив даний запис; DLC – дата та час останньої модифікації даного запису.
2.	Створити сурогатний ключ для деякої таблиці, та написати тригер для обов’язкового заповнення цього поля послідовними значеннями.
3.	Написати тригери для перевірки наступних обмежень цілісності:

Варіант 2.	Кімната не може одночасно бути здана двом орендарям. Орендар, який має борг більший ніж сума трьохмісячної оренди не може отримувати в оренду нові приміщення.

Тригер: кімната не може одночасно бути здана двом орендарям. 
1.	Призначення тригера: 
•	Цей тригер призначений для автоматичної перевірки доступності кімнати перед тим, як вставити новий запис про оренду кімнати в таблицю.
2.	Текст тригера та опис механізму роботи: 
•	Текст тригера розпочинається з оголошення "BEFORE INSERT", що означає, що тригер буде викликано перед тим, як буде виконана операція вставки в таблицю "rent". 
•	У тригері проводиться перевірка кількості записів у таблиці "rent", де дана кімната вже орендована в заданому періоді часу, який визначається новим записом, що додається. Це забезпечується за допомогою умови, яка включає в себе порівняння дат початку та завершення оренди. 
•	Якщо знайдено хоча б один відповідний запис, тригер генерує помилку за допомогою оператора SIGNAL, що вказує, що кімната вже здана в оренду. 
3.	Опис вхідних / вихідних параметрів: 
•	У цьому тригері використовується вхідний параметр NEW, який представляє новий рядок, що вставляється у таблицю "rent". 
•	Параметри start_date та end_date використовуються для визначення періоду оренди кімнати. 
•	Вихідний параметр room_status використовується для збереження кількості знайдених записів, що відповідають умові перевірки доступності кімнати. 
4.	Опис внутрішніх ідентифікаторів: 
•	У цьому тригері внутрішні ідентифікатори не використовуються. 
5.	Приклади результатів роботи:
-- Спроба вставки запису, де кімната вже зайнята іншим орендарем
INSERT INTO rent (premise_id, tenant_id, lease_term, start_date, end_date)
VALUES (1, 2, 6, '2024-05-01', '2024-10-01');
 
DELIMITER //
CREATE TRIGGER check_room_availability
BEFORE INSERT ON rent
FOR EACH ROW
BEGIN
    DECLARE room_status INT;
    -- Перевірка, чи кімната вже здана в оренду
    SELECT COUNT(*)
    INTO room_status
    FROM rent
    WHERE premise_id = NEW.premise_id
      AND start_date <= NEW.end_date
      AND end_date >= NEW.start_date;
      
    IF room_status > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Room is already rented to another tenant';
    END IF;
END //
DELIMITER ;

Тригер: Орендар, який має борг більший ніж сума трьохмісячної оренди не може отримувати в оренду нові приміщення.
1.	Призначення тригера: 
Цей тригер призначений для автоматичної перевірки та обмеження боргу орендаря перед додаванням нового запису про оренду в таблицю.
2.	Текст тригера та опис механізму роботи: 
•	Тригер починається з оголошення "BEFORE INSERT", що означає, що він буде викликаний перед операцією вставки в таблицю "rent". 
•	У тригері обчислюється сума боргу орендаря, шляхом підрахунку суми невиплачених рахунків з таблиці "bill". 
•	Також обчислюється максимально допустимий борг, який обмежується трьома місяцями орендної плати. 
•	Якщо борг орендаря перевищує максимально допустимий, тригер генерує помилку.
3.	Опис вхідних / вихідних параметрів: 
•	Вхідний параметр NEW представляє новий рядок, що вставляється в таблицю "rent". 
•	Додатково використовуються параметри з таблиці "bill" та "premises_type" для обчислення боргу орендаря та максимально допустимого боргу.
4.	Опис внутрішніх ідентифікаторів: 
•	У цьому тригері внутрішні ідентифікатори не використовуються.
5.	Приклади результатів роботи:
-- Спроба вставки запису для орендаря з боргом, який перевищує ліміт
INSERT INTO rent (premise_id, tenant_id, lease_term, start_date, end_date)
VALUES (3, 1, 12, '2025-03-01', '2026-03-01');
 
DELIMITER //
CREATE TRIGGER check_debtor_limit
BEFORE INSERT ON rent
FOR EACH ROW
BEGIN
    DECLARE tenant_debt DECIMAL(10, 2);
    DECLARE max_allowed_debt DECIMAL(10, 2);

    -- Обчислення боргу орендаря
    SELECT SUM(payment_amount)
    INTO tenant_debt
    FROM bill
    WHERE status = 'Unpaid';

    -- Обчислення максимально допустимого боргу
    SET max_allowed_debt = NEW.lease_term * 3 * (SELECT price_per_sqm FROM premises_type WHERE id = NEW.premise_id);
       
    IF tenant_debt > max_allowed_debt THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Tenant has exceeded the maximum allowed debt';
    END IF;
END; //
DELIMITER ;

-- запити для додавання нових полів
ALTER TABLE premises ADD COLUMN UCR VARCHAR(255);
ALTER TABLE premises ADD COLUMN DCR DATETIME;
ALTER TABLE premises ADD COLUMN ULC VARCHAR(255);
ALTER TABLE premises ADD COLUMN DLC DATETIME;

-- Тригер для заповнення полів під час вставки нового запису 
DELIMITER //
CREATE TRIGGER before_insert_premises
BEFORE INSERT ON premises
FOR EACH ROW
BEGIN
    SET NEW.UCR = USER();
    SET NEW.DCR = NOW();
    SET NEW.ULC = USER();
    SET NEW.DLC = NOW();
END; //
DELIMITER ;

-- Тригер для заповнення полів під час оновлення запису 
DELIMITER //

CREATE TRIGGER before_update_premises
BEFORE UPDATE ON premises
FOR EACH ROW
BEGIN
    SET NEW.ULC = USER();
    SET NEW.DLC = NOW();
END; //
DELIMITER ;
--перевірка коректності тригерів
INSERT INTO premises (number, area, premises_type_id)
VALUES (505, 130.50, 3);
UPDATE premises
SET number = 505, area = 130.75, premises_type_id = 3
WHERE id = 5;
